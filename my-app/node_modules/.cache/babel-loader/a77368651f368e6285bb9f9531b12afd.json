{"ast":null,"code":"var _jsxFileName = \"/Users/BTodd/Development/chosen/my-app/src/component/Music/routes/Music.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./Music.css\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Music = () => {\n  _s();\n\n  const youtubeFetch = () => {\n    let interval;\n    let video = null;\n    const url = \"https://youtube.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics&id=UCwwrP7TPQmlkFHCWdCcYNpw&key=AIzaSyBd26sX_fII61osu5b29kaOlB5odp9uMW4\";\n    const http = new XMLHttpRequest();\n    http.open(\"GET\", url, true);\n    http.send();\n\n    http.onreadystatechange = function () {\n      if (http.readyState == 4 && http.status == 200) {\n        video = http.responseText;\n      }\n    };\n\n    function getResult() {\n      // once we get a result, turn interval off. \n      if (video != null) {\n        interval = clearInterval(interval);\n        console.log(video); // we're clearly out of the onreadystatechange scope with our result.\n      }\n    }\n\n    interval = setInterval(\"getResult()\", 1000); // Alert the value of result and clear interval\n  };\n\n  useEffect(() => {\n    youtubeFetch();\n  });\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Music\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 1\n  }, this);\n};\n\n_s(Music, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Music;\nexport default Music;\n\nvar _c;\n\n$RefreshReg$(_c, \"Music\");","map":{"version":3,"sources":["/Users/BTodd/Development/chosen/my-app/src/component/Music/routes/Music.jsx"],"names":["React","useEffect","Music","youtubeFetch","interval","video","url","http","XMLHttpRequest","open","send","onreadystatechange","readyState","status","responseText","getResult","clearInterval","console","log","setInterval"],"mappings":";;;AAAA,OAAO,aAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAEhB,QAAMC,YAAY,GAAG,MAAM;AACvB,QAAIC,QAAJ;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,UAAMC,GAAG,GAAG,uKAAZ;AACA,UAAMC,IAAI,GAAG,IAAIC,cAAJ,EAAb;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAU,KAAV,EAAiBH,GAAjB,EAAsB,IAAtB;AACAC,IAAAA,IAAI,CAACG,IAAL;;AACAH,IAAAA,IAAI,CAACI,kBAAL,GAA0B,YAAY;AAClC,UAAIJ,IAAI,CAACK,UAAL,IAAmB,CAAnB,IAAwBL,IAAI,CAACM,MAAL,IAAe,GAA3C,EAAgD;AAC5CR,QAAAA,KAAK,GAAGE,IAAI,CAACO,YAAb;AACH;AACJ,KAJD;;AAKA,aAASC,SAAT,GAAqB;AACjB;AACA,UAAIV,KAAK,IAAI,IAAb,EAAmB;AACfD,QAAAA,QAAQ,GAAGY,aAAa,CAACZ,QAAD,CAAxB;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ,EAFe,CAEK;AACvB;AACJ;;AACDD,IAAAA,QAAQ,GAAGe,WAAW,CAAC,aAAD,EAAgB,IAAhB,CAAtB,CAnBuB,CAoBvB;AAGH,GAvBD;;AA0BAlB,EAAAA,SAAS,CAAC,MAAM;AAEhBE,IAAAA,YAAY;AACX,GAHQ,CAAT;AAKJ,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAGC,CApCD;;GAAMD,K;;KAAAA,K;AAuCN,eAAeA,KAAf","sourcesContent":["import \"./Music.css\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\n\nconst Music = () => {\n\n    const youtubeFetch = () => {\n        let interval;\n        let video = null\n        const url = \"https://youtube.googleapis.com/youtube/v3/channels?part=snippet%2CcontentDetails%2Cstatistics&id=UCwwrP7TPQmlkFHCWdCcYNpw&key=AIzaSyBd26sX_fII61osu5b29kaOlB5odp9uMW4\"\n        const http = new XMLHttpRequest()\n        http.open(\"GET\", url, true)\n        http.send()\n        http.onreadystatechange = function () {\n            if (http.readyState == 4 && http.status == 200) {\n                video = http.responseText;\n            }\n        }\n        function getResult() {\n            // once we get a result, turn interval off. \n            if (video != null) {\n                interval = clearInterval(interval);\n                console.log(video); // we're clearly out of the onreadystatechange scope with our result.\n            }\n        }\n        interval = setInterval(\"getResult()\", 1000);\n        // Alert the value of result and clear interval\n\n\n    }\n\n\n    useEffect(() => {\n\n    youtubeFetch()\n    })\n\nreturn(\n<h1>Music</h1>\n)\n}\n\n\nexport default Music;\n"]},"metadata":{},"sourceType":"module"}